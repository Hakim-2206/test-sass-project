import { callSecuredFunction } from '@/services/local/authenticationService';

/**
 * Service de gestion des textes c√¥t√© client
 * üîß VERSION DEMO - Service de test pour enregistrer et r√©cup√©rer des textes
 */

export interface TextType {
  id: string;
  workspace_id: string;
  title: string;
  content: string;
  created_by: string;
  created_at: string;
  updated_at: string;
}

export interface CreateTextRequest {
  title?: string;
  content: string;
}

export interface TextsResponse {
  texts: TextType[];
}

export interface TextResponse {
  text: TextType;
}

export class TextService {
  /**
   * Cr√©er un nouveau texte
   * üîß VERSION DEMO - Fonction fant√¥me qui simule la cr√©ation
   */
  async createText(
    workspaceId: string,
    data: CreateTextRequest
  ): Promise<TextType> {
    try {
      // üîß FONCTION FANT√îME - Simule un appel API
      console.log('üìù [DEMO] Cr√©ation texte:', data);
      
      // Simuler un d√©lai d'API
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Retourner un texte simul√©
      const mockText: TextType = {
        id: `text-${Date.now()}`,
        workspace_id: workspaceId,
        title: data.title || 'Sans titre',
        content: data.content,
        created_by: 'demo-user-123',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      return mockText;
    } catch (error) {
      console.error('Erreur cr√©ation texte:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer tous les textes d'un workspace
   * üîß VERSION DEMO - Fonction fant√¥me qui simule la r√©cup√©ration
   */
  static async getTexts(workspaceId: string): Promise<TextType[]> {
    try {
      // üîß FONCTION FANT√îME - Simule un appel API
      console.log('üìã [DEMO] R√©cup√©ration textes pour workspace:', workspaceId);
      
      // Simuler un d√©lai d'API
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // Retourner des textes simul√©s
      const mockTexts: TextType[] = [
        {
          id: 'text-1',
          workspace_id: workspaceId,
          title: 'Premier texte de d√©monstration',
          content: 'Ceci est un exemple de texte enregistr√© dans le syst√®me. Il sert √† tester l\'architecture et les patterns de d√©veloppement.',
          created_by: 'demo-user-123',
          created_at: new Date(Date.now() - 86400000).toISOString(), // Hier
          updated_at: new Date(Date.now() - 86400000).toISOString()
        },
        {
          id: 'text-2',
          workspace_id: workspaceId,
          title: 'Deuxi√®me exemple',
          content: 'Un autre texte pour montrer la liste et les fonctionnalit√©s CRUD de base.',
          created_by: 'demo-user-123',
          created_at: new Date(Date.now() - 3600000).toISOString(), // Il y a 1h
          updated_at: new Date(Date.now() - 3600000).toISOString()
        },
        {
          id: 'text-3',
          workspace_id: workspaceId,
          title: 'Test technique',
          content: 'Ce texte d√©montre l\'utilisation des services, hooks et composants selon les r√®gles d\'architecture Agentova.',
          created_by: 'demo-user-123',
          created_at: new Date().toISOString(), // Maintenant
          updated_at: new Date().toISOString()
        }
      ];
      
      return mockTexts;
    } catch (error) {
      console.error('Erreur r√©cup√©ration textes:', error);
      throw error;
    }
  }

  /**
   * Supprimer un texte
   * üîß VERSION DEMO - Fonction fant√¥me qui simule la suppression
   */
  static async deleteText(
    workspaceId: string,
    textId: string
  ): Promise<boolean> {
    try {
      // üîß FONCTION FANT√îME - Simule un appel API
      console.log('üóëÔ∏è [DEMO] Suppression texte:', textId);
      
      // Simuler un d√©lai d'API
      await new Promise(resolve => setTimeout(resolve, 400));
      
      // Toujours r√©ussir en mode demo
      return true;
    } catch (error) {
      console.error('Erreur suppression texte:', error);
      throw error;
    }
  }

  /**
   * Mettre √† jour un texte
   * üîß VERSION DEMO - Fonction fant√¥me qui simule la mise √† jour
   */
  static async updateText(
    workspaceId: string,
    textId: string,
    data: Partial<CreateTextRequest>
  ): Promise<TextType> {
    try {
      // üîß FONCTION FANT√îME - Simule un appel API
      console.log('‚úèÔ∏è [DEMO] Mise √† jour texte:', textId, data);
      
      // Simuler un d√©lai d'API
      await new Promise(resolve => setTimeout(resolve, 450));
      
      // Retourner un texte mis √† jour simul√©
      const mockUpdatedText: TextType = {
        id: textId,
        workspace_id: workspaceId,
        title: data.title || 'Titre mis √† jour',
        content: data.content || 'Contenu mis √† jour',
        created_by: 'demo-user-123',
        created_at: new Date(Date.now() - 86400000).toISOString(),
        updated_at: new Date().toISOString() // Maintenant
      };
      
      return mockUpdatedText;
    } catch (error) {
      console.error('Erreur mise √† jour texte:', error);
      throw error;
    }
  }
}
