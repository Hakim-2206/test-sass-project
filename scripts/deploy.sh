#!/bin/bash

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}üîß VERSION DEMO - D√©marrage environnement de d√©veloppement local${NC}"

# Fonction pour d√©placer les logs
move_logs() {
    echo -e "${BLUE}üìÅ D√©placement des logs dans le dossier logs/...${NC}"
    mkdir -p logs
    mv *-debug.log logs/ 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Logs organis√©s${NC}"
}

# D√©placer les logs existants
move_logs

# S'assurer d'√™tre dans le bon dossier
if [ -d "server" ]; then
    echo -e "${BLUE}üìÇ Navigation vers le dossier server...${NC}"
    cd server
elif [ -f "package.json" ] && [ -f "tsconfig.json" ]; then
    echo -e "${GREEN}‚úÖ D√©j√† dans le dossier server${NC}"
else
    echo -e "${RED}‚ùå Ce script doit √™tre ex√©cut√© depuis le dossier server ou son parent${NC}"
    exit 1
fi

# Configuration de l'environnement (toujours local)
export FASTAPI_ENV="local"
export NODE_ENV=development

echo -e "${BLUE}üî® Installation des d√©pendances...${NC}"
npm install

echo -e "${BLUE}üî® Build du projet (mode simplifi√©)...${NC}"

# Build simplifi√© sans erreurs
if npm run build 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Build r√©ussi${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Build √©chou√©, mais on continue (mode demo)${NC}"
fi

# Aller dans le dossier parent pour les √©mulateurs
cd ..

echo -e "${GREEN}üöÄ D√©marrage des √©mulateurs Firebase...${NC}"
echo -e "${YELLOW}üì° FastAPI configur√© en mode local (http://127.0.0.1:8080)${NC}"

# D√©marrer les √©mulateurs
firebase emulators:start --import=./emulator-data --export-on-exit=./emulator-data

# D√©placer les logs √† la fin
move_logs